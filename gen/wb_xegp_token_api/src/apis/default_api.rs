/*
 * u0zh4okck0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`allowance_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AllowanceGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`allowance_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AllowancePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`approval_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApprovalSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`approval_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApprovalSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`approve_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApproveGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`approve_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApprovePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`balance_of_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BalanceOfGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`balance_of_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BalanceOfPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`constructor_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConstructorPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`decimals_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DecimalsGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`decimals_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DecimalsPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mint_and_transfer_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MintAndTransferGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mint_and_transfer_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MintAndTransferPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`name_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NameGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`name_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NamePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_owner_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetOwnerGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_owner_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetOwnerPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`symbol_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SymbolGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`symbol_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SymbolPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`total_supply_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TotalSupplyGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`total_supply_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TotalSupplyPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_from_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferFromGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_from_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferFromPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

pub async fn allowance_get(
    configuration: &configuration::Configuration,
    address: &str,
    owner: &str,
    spender: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::AllowanceOutputs, Error<AllowanceGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/allowance",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("owner", &owner.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("spender", &spender.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AllowanceGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn allowance_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::AllowanceInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::AllowanceOutputs, Error<AllowancePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/allowance",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AllowancePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn approval_subscribe(
    configuration: &configuration::Configuration,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::ApprovalEvent, Error<ApprovalSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Approval/subscribe", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApprovalSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn approval_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::ApprovalEvent, Error<ApprovalSubscribeAllError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/Approval/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApprovalSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn approve_get(
    configuration: &configuration::Configuration,
    address: &str,
    spender: &str,
    value: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::ApproveOutputs, Error<ApproveGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/approve",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("spender", &spender.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("value", &value.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApproveGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn approve_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::ApproveInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::ApproveOutputs, Error<ApprovePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/approve",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApprovePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn balance_of_get(
    configuration: &configuration::Configuration,
    address: &str,
    account: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::BalanceOfOutputs, Error<BalanceOfGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/balanceOf",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("account", &account.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BalanceOfGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn balance_of_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::BalanceOfInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::BalanceOfOutputs, Error<BalanceOfPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/balanceOf",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BalanceOfPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn constructor_post(
    configuration: &configuration::Configuration,
    body: models::ConstructorInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_register: Option<&str>,
) -> Result<serde_json::Value, Error<ConstructorPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_register {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-register", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ConstructorPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn decimals_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::DecimalsOutputs, Error<DecimalsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/decimals",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DecimalsGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn decimals_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::DecimalsOutputs, Error<DecimalsPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/decimals",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DecimalsPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn mint_and_transfer_get(
    configuration: &configuration::Configuration,
    address: &str,
    account: &str,
    amount: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<MintAndTransferGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/mintAndTransfer",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("account", &account.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("amount", &amount.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MintAndTransferGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn mint_and_transfer_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::MintAndTransferInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<MintAndTransferPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/mintAndTransfer",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MintAndTransferPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn name_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::NameOutputs, Error<NameGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/name",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NameGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn name_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::NameOutputs, Error<NamePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/name",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NamePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_owner_get(
    configuration: &configuration::Configuration,
    address: &str,
    owner_address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<SetOwnerGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/setOwner",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("ownerAddress", &owner_address.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetOwnerGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_owner_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::SetOwnerInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<SetOwnerPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/setOwner",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetOwnerPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn symbol_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::SymbolOutputs, Error<SymbolGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/symbol",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SymbolGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn symbol_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::SymbolOutputs, Error<SymbolPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/symbol",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SymbolPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn total_supply_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::TotalSupplyOutputs, Error<TotalSupplyGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/totalSupply",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TotalSupplyGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn total_supply_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::TotalSupplyOutputs, Error<TotalSupplyPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/totalSupply",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TotalSupplyPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn transfer_from_get(
    configuration: &configuration::Configuration,
    address: &str,
    from: &str,
    to: &str,
    value: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::TransferFromOutputs, Error<TransferFromGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/transferFrom",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("from", &from.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("value", &value.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferFromGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn transfer_from_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::TransferFromInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::TransferFromOutputs, Error<TransferFromPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/transferFrom",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferFromPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn transfer_get(
    configuration: &configuration::Configuration,
    address: &str,
    to: &str,
    value: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::TransferOutputs, Error<TransferGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/transfer",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("value", &value.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn transfer_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::TransferInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::TransferOutputs, Error<TransferPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/transfer",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn transfer_subscribe(
    configuration: &configuration::Configuration,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::TransferEvent, Error<TransferSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Transfer/subscribe", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn transfer_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::TransferEvent, Error<TransferSubscribeAllError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/Transfer/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
