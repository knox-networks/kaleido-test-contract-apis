/*
 * u0ta9zm0up
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`calculate_swap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CalculateSwapGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`calculate_swap_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CalculateSwapPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`calculate_total_liquidity_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CalculateTotalLiquidityGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`calculate_total_liquidity_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CalculateTotalLiquidityPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`constructor_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConstructorPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_erc20_liquidity_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetErc20LiquidityGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_erc20_liquidity_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetErc20LiquidityPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_htlc_contract_address_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetHtlcContractAddressGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_htlc_contract_address_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetHtlcContractAddressPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_payment_notification_contract_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPaymentNotificationContractGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_payment_notification_contract_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPaymentNotificationContractPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`new_transfer_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NewTransferGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`new_transfer_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NewTransferPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`new_transfer_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NewTransferSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`new_transfer_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NewTransferSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_htlc_contract_address_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetHtlcContractAddressGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_htlc_contract_address_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetHtlcContractAddressPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_payment_notification_contract_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetPaymentNotificationContractGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_payment_notification_contract_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetPaymentNotificationContractPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

pub async fn calculate_swap_get(
    configuration: &configuration::Configuration,
    address: &str,
    payer_token_address: &str,
    payee_token_address: &str,
    exchange_rate: &str,
    amount: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::CalculateSwapOutputs, Error<CalculateSwapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/calculateSwap",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("payerTokenAddress", &payer_token_address.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("payeeTokenAddress", &payee_token_address.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("exchangeRate", &exchange_rate.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("amount", &amount.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CalculateSwapGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn calculate_swap_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::CalculateSwapInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::CalculateSwapOutputs, Error<CalculateSwapPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/calculateSwap",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CalculateSwapPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn calculate_total_liquidity_get(
    configuration: &configuration::Configuration,
    address: &str,
    payer_token_address: &str,
    payee_token_address: &str,
    exchange_rate: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::CalculateTotalLiquidityOutputs, Error<CalculateTotalLiquidityGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/calculateTotalLiquidity",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("payerTokenAddress", &payer_token_address.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("payeeTokenAddress", &payee_token_address.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("exchangeRate", &exchange_rate.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CalculateTotalLiquidityGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn calculate_total_liquidity_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::CalculateTotalLiquidityInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::CalculateTotalLiquidityOutputs, Error<CalculateTotalLiquidityPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/calculateTotalLiquidity",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CalculateTotalLiquidityPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn constructor_post(
    configuration: &configuration::Configuration,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_register: Option<&str>,
) -> Result<serde_json::Value, Error<ConstructorPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_register {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-register", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ConstructorPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_erc20_liquidity_get(
    configuration: &configuration::Configuration,
    address: &str,
    token_address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::GetErc20LiquidityOutputs, Error<GetErc20LiquidityGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getERC20Liquidity",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("tokenAddress", &token_address.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetErc20LiquidityGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_erc20_liquidity_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::GetErc20LiquidityInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::GetErc20LiquidityOutputs, Error<GetErc20LiquidityPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getERC20Liquidity",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetErc20LiquidityPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_htlc_contract_address_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::GetHtlcContractAddressOutputs, Error<GetHtlcContractAddressGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getHTLCContractAddress",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetHtlcContractAddressGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_htlc_contract_address_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::GetHtlcContractAddressOutputs, Error<GetHtlcContractAddressPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getHTLCContractAddress",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetHtlcContractAddressPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_payment_notification_contract_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<
    models::GetPaymentNotificationContractOutputs,
    Error<GetPaymentNotificationContractGetError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getPaymentNotificationContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPaymentNotificationContractGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_payment_notification_contract_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<
    models::GetPaymentNotificationContractOutputs,
    Error<GetPaymentNotificationContractPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getPaymentNotificationContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPaymentNotificationContractPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn new_transfer_get(
    configuration: &configuration::Configuration,
    address: &str,
    contract_id: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<NewTransferGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/newTransfer",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("contractId", &contract_id.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NewTransferGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn new_transfer_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::NewTransferInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<NewTransferPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/newTransfer",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NewTransferPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn new_transfer_subscribe(
    configuration: &configuration::Configuration,
    body: models::NewTransferSubscribeRequest,
) -> Result<models::NewTransferEvent, Error<NewTransferSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/NewTransfer/subscribe",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NewTransferSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn new_transfer_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::NewTransferSubscribeRequest,
) -> Result<models::NewTransferEvent, Error<NewTransferSubscribeAllError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/NewTransfer/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NewTransferSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_htlc_contract_address_get(
    configuration: &configuration::Configuration,
    address: &str,
    htlc_handler_address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<SetHtlcContractAddressGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/setHTLCContractAddress",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("HTLCHandlerAddress", &htlc_handler_address.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetHtlcContractAddressGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_htlc_contract_address_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::SetHtlcContractAddressInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<SetHtlcContractAddressPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/setHTLCContractAddress",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetHtlcContractAddressPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_payment_notification_contract_get(
    configuration: &configuration::Configuration,
    address: &str,
    payment_notification_contract: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<SetPaymentNotificationContractGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/setPaymentNotificationContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[(
        "paymentNotificationContract",
        &payment_notification_contract.to_string(),
    )]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetPaymentNotificationContractGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_payment_notification_contract_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::SetPaymentNotificationContractInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<SetPaymentNotificationContractPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/setPaymentNotificationContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetPaymentNotificationContractPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
