/*
 * u0zvk4trgb
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`build_payment_notification_key_from_address_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BuildPaymentNotificationKeyFromAddressGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`build_payment_notification_key_from_address_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BuildPaymentNotificationKeyFromAddressPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`constructor_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConstructorPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_payment_notification_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreatePaymentNotificationGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_payment_notification_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreatePaymentNotificationPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_intermediary_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetIntermediaryGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_intermediary_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetIntermediaryPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_owner_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOwnerGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_owner_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOwnerPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_payment_notification_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPaymentNotificationGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_payment_notification_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPaymentNotificationPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`intermediary_registration_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IntermediaryRegistrationSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`intermediary_registration_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IntermediaryRegistrationSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`owner_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OwnerGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`owner_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OwnerPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payeee_respond_sanctions_screening_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PayeeeRespondSanctionsScreeningGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payeee_respond_sanctions_screening_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PayeeeRespondSanctionsScreeningPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payer_respond_sanctions_screening_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PayerRespondSanctionsScreeningGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payer_respond_sanctions_screening_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PayerRespondSanctionsScreeningPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_notification_event_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentNotificationEventSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_notification_event_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentNotificationEventSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`register_intermediary_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RegisterIntermediaryGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`register_intermediary_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RegisterIntermediaryPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_owner_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetOwnerGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_owner_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetOwnerPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

pub async fn build_payment_notification_key_from_address_get(
    configuration: &configuration::Configuration,
    address: &str,
    uetr: &str,
    intermediary_address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<
    models::BuildPaymentNotificationKeyFromAddressOutputs,
    Error<BuildPaymentNotificationKeyFromAddressGetError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/buildPaymentNotificationKeyFromAddress",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("uetr", &uetr.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("intermediaryAddress", &intermediary_address.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BuildPaymentNotificationKeyFromAddressGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn build_payment_notification_key_from_address_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::BuildPaymentNotificationKeyFromAddressInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<
    models::BuildPaymentNotificationKeyFromAddressOutputs,
    Error<BuildPaymentNotificationKeyFromAddressPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/buildPaymentNotificationKeyFromAddress",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BuildPaymentNotificationKeyFromAddressPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn constructor_post(
    configuration: &configuration::Configuration,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_register: Option<&str>,
) -> Result<serde_json::Value, Error<ConstructorPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_register {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-register", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ConstructorPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_payment_notification_get(
    configuration: &configuration::Configuration,
    address: &str,
    uetr: &str,
    aliases: &str,
    transfer_details: &str,
    pacs_json: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<CreatePaymentNotificationGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/createPaymentNotification",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("uetr", &uetr.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("aliases", &aliases.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("transferDetails", &transfer_details.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("pacsJson", &pacs_json.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreatePaymentNotificationGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_payment_notification_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::CreatePaymentNotificationInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<CreatePaymentNotificationPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/createPaymentNotification",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreatePaymentNotificationPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_intermediary_get(
    configuration: &configuration::Configuration,
    address: &str,
    intermediary_address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::GetIntermediaryOutputs, Error<GetIntermediaryGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getIntermediary",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("intermediaryAddress", &intermediary_address.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetIntermediaryGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_intermediary_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::GetIntermediaryInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::GetIntermediaryOutputs, Error<GetIntermediaryPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getIntermediary",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetIntermediaryPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_owner_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::GetOwnerOutputs, Error<GetOwnerGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getOwner",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOwnerGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_owner_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::GetOwnerOutputs, Error<GetOwnerPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getOwner",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOwnerPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_payment_notification_get(
    configuration: &configuration::Configuration,
    address: &str,
    key: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::GetPaymentNotificationOutputs, Error<GetPaymentNotificationGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getPaymentNotification",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("key", &key.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPaymentNotificationGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_payment_notification_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::GetPaymentNotificationInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::GetPaymentNotificationOutputs, Error<GetPaymentNotificationPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getPaymentNotification",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPaymentNotificationPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn intermediary_registration_subscribe(
    configuration: &configuration::Configuration,
    body: models::IntermediaryRegistrationSubscribeRequest,
) -> Result<models::IntermediaryRegistrationEvent, Error<IntermediaryRegistrationSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/IntermediaryRegistration/subscribe",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IntermediaryRegistrationSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn intermediary_registration_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::IntermediaryRegistrationSubscribeRequest,
) -> Result<models::IntermediaryRegistrationEvent, Error<IntermediaryRegistrationSubscribeAllError>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/IntermediaryRegistration/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IntermediaryRegistrationSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn owner_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::OwnerOutputs, Error<OwnerGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/owner",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OwnerGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn owner_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::OwnerOutputs, Error<OwnerPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/owner",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OwnerPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payeee_respond_sanctions_screening_get(
    configuration: &configuration::Configuration,
    address: &str,
    key: &str,
    payer_verif_by_payee_country: &str,
    payee_verif_by_payee_country: &str,
    pac_json: &str,
    hashlock: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<PayeeeRespondSanctionsScreeningGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/payeeeRespondSanctionsScreening",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("key", &key.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[(
        "payerVerifByPayeeCountry",
        &payer_verif_by_payee_country.to_string(),
    )]);
    local_var_req_builder = local_var_req_builder.query(&[(
        "payeeVerifByPayeeCountry",
        &payee_verif_by_payee_country.to_string(),
    )]);
    local_var_req_builder = local_var_req_builder.query(&[("pacJson", &pac_json.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("hashlock", &hashlock.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PayeeeRespondSanctionsScreeningGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payeee_respond_sanctions_screening_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::PayeeeRespondSanctionsScreeningInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<PayeeeRespondSanctionsScreeningPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/payeeeRespondSanctionsScreening",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PayeeeRespondSanctionsScreeningPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payer_respond_sanctions_screening_get(
    configuration: &configuration::Configuration,
    address: &str,
    key: &str,
    payee_verif_by_payer_country: &str,
    pac_json: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<PayerRespondSanctionsScreeningGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/payerRespondSanctionsScreening",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("key", &key.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[(
        "payeeVerifByPayerCountry",
        &payee_verif_by_payer_country.to_string(),
    )]);
    local_var_req_builder = local_var_req_builder.query(&[("pacJson", &pac_json.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PayerRespondSanctionsScreeningGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payer_respond_sanctions_screening_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::PayerRespondSanctionsScreeningInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<PayerRespondSanctionsScreeningPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/payerRespondSanctionsScreening",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PayerRespondSanctionsScreeningPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_notification_event_subscribe(
    configuration: &configuration::Configuration,
    body: models::IntermediaryRegistrationSubscribeRequest,
) -> Result<models::PaymentNotificationEventEvent, Error<PaymentNotificationEventSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/PaymentNotificationEvent/subscribe",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentNotificationEventSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_notification_event_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::IntermediaryRegistrationSubscribeRequest,
) -> Result<models::PaymentNotificationEventEvent, Error<PaymentNotificationEventSubscribeAllError>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/PaymentNotificationEvent/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentNotificationEventSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn register_intermediary_get(
    configuration: &configuration::Configuration,
    address: &str,
    intermediary_address: &str,
    name: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<RegisterIntermediaryGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/registerIntermediary",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("intermediaryAddress", &intermediary_address.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("name", &name.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RegisterIntermediaryGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn register_intermediary_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::RegisterIntermediaryInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<RegisterIntermediaryPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/registerIntermediary",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RegisterIntermediaryPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_owner_get(
    configuration: &configuration::Configuration,
    address: &str,
    owner_address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<SetOwnerGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/setOwner",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("ownerAddress", &owner_address.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetOwnerGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_owner_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::SetOwnerInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<SetOwnerPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/setOwner",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetOwnerPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
