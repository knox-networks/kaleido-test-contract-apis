/*
 * kaleidoerc20mb
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`allowance_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AllowanceGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`allowance_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AllowancePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`approval_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApprovalSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`approval_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApprovalSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`approve_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApproveGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`approve_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApprovePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`balance_of_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BalanceOfGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`balance_of_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BalanceOfPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`burn_from_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BurnFromGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`burn_from_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BurnFromPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`burn_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BurnGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`burn_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BurnPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`constructor_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConstructorPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`d_efaultadminrole_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEfaultadminroleGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`d_efaultadminrole_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEfaultadminrolePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`decimals_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DecimalsGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`decimals_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DecimalsPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`decrease_allowance_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DecreaseAllowanceGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`decrease_allowance_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DecreaseAllowancePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_role_admin_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRoleAdminGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_role_admin_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRoleAdminPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_role_member_count_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRoleMemberCountGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_role_member_count_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRoleMemberCountPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_role_member_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRoleMemberGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_role_member_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRoleMemberPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`grant_role_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GrantRoleGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`grant_role_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GrantRolePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`has_role_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HasRoleGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`has_role_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HasRolePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`increase_allowance_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IncreaseAllowanceGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`increase_allowance_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IncreaseAllowancePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`m_interrole_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MInterroleGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`m_interrole_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MInterrolePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mint_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MintGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mint_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MintPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`name_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NameGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`name_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NamePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`renounce_role_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RenounceRoleGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`renounce_role_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RenounceRolePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`revoke_role_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RevokeRoleGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`revoke_role_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RevokeRolePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`role_granted_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RoleGrantedSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`role_granted_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RoleGrantedSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`role_revoked_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RoleRevokedSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`role_revoked_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RoleRevokedSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`symbol_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SymbolGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`symbol_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SymbolPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`total_supply_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TotalSupplyGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`total_supply_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TotalSupplyPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_from_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferFromGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_from_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferFromPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// See {IERC20-allowance}.
pub async fn allowance_get(
    configuration: &configuration::Configuration,
    address: &str,
    owner: &str,
    spender: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::AllowanceOutputs, Error<AllowanceGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/allowance",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("owner", &owner.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("spender", &spender.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AllowanceGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// See {IERC20-allowance}.
pub async fn allowance_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::AllowanceInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::AllowanceOutputs, Error<AllowancePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/allowance",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AllowancePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn approval_subscribe(
    configuration: &configuration::Configuration,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::ApprovalEvent, Error<ApprovalSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Approval/subscribe", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApprovalSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn approval_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::ApprovalEvent, Error<ApprovalSubscribeAllError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/Approval/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApprovalSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.
pub async fn approve_get(
    configuration: &configuration::Configuration,
    address: &str,
    spender: &str,
    amount: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::ApproveOutputs, Error<ApproveGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/approve",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("spender", &spender.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("amount", &amount.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApproveGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.
pub async fn approve_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::ApproveInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::ApproveOutputs, Error<ApprovePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/approve",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApprovePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// See {IERC20-balanceOf}.
pub async fn balance_of_get(
    configuration: &configuration::Configuration,
    address: &str,
    account: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::BalanceOfOutputs, Error<BalanceOfGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/balanceOf",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("account", &account.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BalanceOfGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// See {IERC20-balanceOf}.
pub async fn balance_of_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::BalanceOfInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::BalanceOfOutputs, Error<BalanceOfPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/balanceOf",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BalanceOfPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.
pub async fn burn_from_get(
    configuration: &configuration::Configuration,
    address: &str,
    account: &str,
    amount: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<BurnFromGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/burnFrom",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("account", &account.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("amount", &amount.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BurnFromGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.
pub async fn burn_from_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::BurnFromInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<serde_json::Value, Error<BurnFromPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/burnFrom",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BurnFromPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Destroys `amount` tokens from the caller. See {ERC20-_burn}.
pub async fn burn_get(
    configuration: &configuration::Configuration,
    address: &str,
    amount: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<BurnGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/burn",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("amount", &amount.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BurnGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Destroys `amount` tokens from the caller. See {ERC20-_burn}.
pub async fn burn_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::BurnInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<serde_json::Value, Error<BurnPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/burn",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BurnPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn constructor_post(
    configuration: &configuration::Configuration,
    body: models::ConstructorInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
    kld_register: Option<&str>,
) -> Result<serde_json::Value, Error<ConstructorPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_register {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-register", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ConstructorPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn d_efaultadminrole_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::DefaultAdminRoleOutputs, Error<DEfaultadminroleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/DEFAULT_ADMIN_ROLE",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEfaultadminroleGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn d_efaultadminrole_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::DefaultAdminRoleOutputs, Error<DEfaultadminrolePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/DEFAULT_ADMIN_ROLE",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEfaultadminrolePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
pub async fn decimals_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::DecimalsOutputs, Error<DecimalsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/decimals",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DecimalsGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
pub async fn decimals_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::DecimalsOutputs, Error<DecimalsPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/decimals",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DecimalsPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.
pub async fn decrease_allowance_get(
    configuration: &configuration::Configuration,
    address: &str,
    spender: &str,
    subtracted_value: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::DecreaseAllowanceOutputs, Error<DecreaseAllowanceGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/decreaseAllowance",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("spender", &spender.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("subtractedValue", &subtracted_value.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DecreaseAllowanceGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.
pub async fn decrease_allowance_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::DecreaseAllowanceInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::DecreaseAllowanceOutputs, Error<DecreaseAllowancePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/decreaseAllowance",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DecreaseAllowancePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
pub async fn get_role_admin_get(
    configuration: &configuration::Configuration,
    address: &str,
    role: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::GetRoleAdminOutputs, Error<GetRoleAdminGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getRoleAdmin",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("role", &role.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRoleAdminGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
pub async fn get_role_admin_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::GetRoleAdminInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::GetRoleAdminOutputs, Error<GetRoleAdminPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getRoleAdmin",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRoleAdminPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
pub async fn get_role_member_count_get(
    configuration: &configuration::Configuration,
    address: &str,
    role: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::GetRoleMemberCountOutputs, Error<GetRoleMemberCountGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getRoleMemberCount",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("role", &role.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRoleMemberCountGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
pub async fn get_role_member_count_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::GetRoleMemberCountInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::GetRoleMemberCountOutputs, Error<GetRoleMemberCountPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getRoleMemberCount",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRoleMemberCountPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
pub async fn get_role_member_get(
    configuration: &configuration::Configuration,
    address: &str,
    role: &str,
    index: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::GetRoleMemberOutputs, Error<GetRoleMemberGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getRoleMember",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("role", &role.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("index", &index.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRoleMemberGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
pub async fn get_role_member_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::GetRoleMemberInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::GetRoleMemberOutputs, Error<GetRoleMemberPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getRoleMember",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRoleMemberPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
pub async fn grant_role_get(
    configuration: &configuration::Configuration,
    address: &str,
    role: &str,
    account: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<GrantRoleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/grantRole",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("role", &role.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("account", &account.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GrantRoleGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
pub async fn grant_role_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::GrantRoleInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<serde_json::Value, Error<GrantRolePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/grantRole",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GrantRolePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns `true` if `account` has been granted `role`.
pub async fn has_role_get(
    configuration: &configuration::Configuration,
    address: &str,
    role: &str,
    account: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::HasRoleOutputs, Error<HasRoleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/hasRole",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("role", &role.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("account", &account.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HasRoleGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns `true` if `account` has been granted `role`.
pub async fn has_role_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::HasRoleInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::HasRoleOutputs, Error<HasRolePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/hasRole",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HasRolePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.
pub async fn increase_allowance_get(
    configuration: &configuration::Configuration,
    address: &str,
    spender: &str,
    added_value: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::IncreaseAllowanceOutputs, Error<IncreaseAllowanceGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/increaseAllowance",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("spender", &spender.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("addedValue", &added_value.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IncreaseAllowanceGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.
pub async fn increase_allowance_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::IncreaseAllowanceInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::IncreaseAllowanceOutputs, Error<IncreaseAllowancePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/increaseAllowance",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IncreaseAllowancePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn m_interrole_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::MinterRoleOutputs, Error<MInterroleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/MINTER_ROLE",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MInterroleGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn m_interrole_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::MinterRoleOutputs, Error<MInterrolePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/MINTER_ROLE",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MInterrolePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn mint_get(
    configuration: &configuration::Configuration,
    address: &str,
    to: &str,
    amount: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<MintGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/mint",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("to", &to.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("amount", &amount.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MintGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn mint_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::MintInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<serde_json::Value, Error<MintPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/mint",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MintPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the name of the token.
pub async fn name_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::NameOutputs, Error<NameGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/name",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NameGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the name of the token.
pub async fn name_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::NameOutputs, Error<NamePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/name",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NamePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
pub async fn renounce_role_get(
    configuration: &configuration::Configuration,
    address: &str,
    role: &str,
    account: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<RenounceRoleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/renounceRole",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("role", &role.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("account", &account.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RenounceRoleGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
pub async fn renounce_role_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::RenounceRoleInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<serde_json::Value, Error<RenounceRolePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/renounceRole",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RenounceRolePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
pub async fn revoke_role_get(
    configuration: &configuration::Configuration,
    address: &str,
    role: &str,
    account: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<RevokeRoleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/revokeRole",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("role", &role.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("account", &account.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RevokeRoleGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
pub async fn revoke_role_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::RevokeRoleInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<serde_json::Value, Error<RevokeRolePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/revokeRole",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RevokeRolePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn role_granted_subscribe(
    configuration: &configuration::Configuration,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::RoleGrantedEvent, Error<RoleGrantedSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/RoleGranted/subscribe",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RoleGrantedSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn role_granted_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::RoleGrantedEvent, Error<RoleGrantedSubscribeAllError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/RoleGranted/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RoleGrantedSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn role_revoked_subscribe(
    configuration: &configuration::Configuration,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::RoleRevokedEvent, Error<RoleRevokedSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/RoleRevoked/subscribe",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RoleRevokedSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn role_revoked_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::RoleRevokedEvent, Error<RoleRevokedSubscribeAllError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/RoleRevoked/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RoleRevokedSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the symbol of the token, usually a shorter version of the name.
pub async fn symbol_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::SymbolOutputs, Error<SymbolGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/symbol",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SymbolGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the symbol of the token, usually a shorter version of the name.
pub async fn symbol_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::SymbolOutputs, Error<SymbolPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/symbol",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SymbolPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// See {IERC20-totalSupply}.
pub async fn total_supply_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::TotalSupplyOutputs, Error<TotalSupplyGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/totalSupply",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TotalSupplyGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// See {IERC20-totalSupply}.
pub async fn total_supply_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::TotalSupplyOutputs, Error<TotalSupplyPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/totalSupply",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TotalSupplyPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.
pub async fn transfer_from_get(
    configuration: &configuration::Configuration,
    address: &str,
    sender: &str,
    recipient: &str,
    amount: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::TransferFromOutputs, Error<TransferFromGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/transferFrom",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("sender", &sender.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("recipient", &recipient.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("amount", &amount.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferFromGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.
pub async fn transfer_from_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::TransferFromInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::TransferFromOutputs, Error<TransferFromPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/transferFrom",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferFromPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.
pub async fn transfer_get(
    configuration: &configuration::Configuration,
    address: &str,
    recipient: &str,
    amount: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::TransferOutputs, Error<TransferGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/transfer",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("recipient", &recipient.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("amount", &amount.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.
pub async fn transfer_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::TransferInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_privacygroupid: Option<&str>,
) -> Result<models::TransferOutputs, Error<TransferPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/transfer",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privacygroupid {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privacygroupid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn transfer_subscribe(
    configuration: &configuration::Configuration,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::TransferEvent, Error<TransferSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Transfer/subscribe", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn transfer_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::ApprovalSubscribeRequest,
) -> Result<models::TransferEvent, Error<TransferSubscribeAllError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/Transfer/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
