/*
 * u0ff6ziwba
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`calculate_hash_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CalculateHashGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`calculate_hash_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CalculateHashPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`constructor_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConstructorPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_contract_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetContractGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_contract_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetContractPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cross_border_contracts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCrossBorderContractsGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cross_border_contracts_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCrossBorderContractsPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_payment_notification_contract_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPaymentNotificationContractGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_payment_notification_contract_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPaymentNotificationContractPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`h_tlcerc20_crossborder_unlock_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HTlcerc20CrossborderUnlockSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`h_tlcerc20_crossborder_unlock_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HTlcerc20CrossborderUnlockSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`h_tlcerc20_new_ammto_payee_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HTlcerc20NewAmmtoPayeeSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`h_tlcerc20_new_ammto_payee_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HTlcerc20NewAmmtoPayeeSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`h_tlcerc20_new_payer_to_amm_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HTlcerc20NewPayerToAmmSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`h_tlcerc20_new_payer_to_amm_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HTlcerc20NewPayerToAmmSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`h_tlcerc20_refund_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HTlcerc20RefundSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`h_tlcerc20_refund_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HTlcerc20RefundSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`h_tlcerc20_withdraw_subscribe`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HTlcerc20WithdrawSubscribeError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`h_tlcerc20_withdraw_subscribe_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HTlcerc20WithdrawSubscribeAllError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`new_contract_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NewContractGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`new_contract_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NewContractPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`new_cross_border_contract_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NewCrossBorderContractGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`new_cross_border_contract_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NewCrossBorderContractPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`owner_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OwnerGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`owner_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OwnerPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_notification_contract_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentNotificationContractGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payment_notification_contract_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentNotificationContractPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`refund_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RefundGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`refund_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RefundPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_payment_notification_contract_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetPaymentNotificationContractGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_payment_notification_contract_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetPaymentNotificationContractPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`unlock_cross_border_payments_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UnlockCrossBorderPaymentsGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`unlock_cross_border_payments_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UnlockCrossBorderPaymentsPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`withdraw_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WithdrawGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`withdraw_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WithdrawPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

pub async fn calculate_hash_get(
    configuration: &configuration::Configuration,
    address: &str,
    input: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::CalculateHashOutputs, Error<CalculateHashGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/calculateHash",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("input", &input.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CalculateHashGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn calculate_hash_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::CalculateHashInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::CalculateHashOutputs, Error<CalculateHashPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/calculateHash",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CalculateHashPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn constructor_post(
    configuration: &configuration::Configuration,
    body: models::ConstructorInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
    kld_register: Option<&str>,
) -> Result<serde_json::Value, Error<ConstructorPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_register {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-register", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ConstructorPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_contract_get(
    configuration: &configuration::Configuration,
    address: &str,
    _contract_id: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::GetContractOutputs, Error<GetContractGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("_contractId", &_contract_id.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetContractGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_contract_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::GetContractInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::GetContractOutputs, Error<GetContractPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetContractPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_cross_border_contracts_get(
    configuration: &configuration::Configuration,
    address: &str,
    transfer_key: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::GetCrossBorderContractsOutputs, Error<GetCrossBorderContractsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getCrossBorderContracts",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("transferKey", &transfer_key.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCrossBorderContractsGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_cross_border_contracts_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::GetCrossBorderContractsInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::GetCrossBorderContractsOutputs, Error<GetCrossBorderContractsPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getCrossBorderContracts",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCrossBorderContractsPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_payment_notification_contract_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<
    models::GetPaymentNotificationContractOutputs,
    Error<GetPaymentNotificationContractGetError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getPaymentNotificationContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPaymentNotificationContractGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_payment_notification_contract_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<
    models::GetPaymentNotificationContractOutputs,
    Error<GetPaymentNotificationContractPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/getPaymentNotificationContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPaymentNotificationContractPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn h_tlcerc20_crossborder_unlock_subscribe(
    configuration: &configuration::Configuration,
    body: models::Htlcerc20CrossborderUnlockSubscribeRequest,
) -> Result<models::Htlcerc20CrossborderUnlockEvent, Error<HTlcerc20CrossborderUnlockSubscribeError>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/HTLCERC20CrossborderUnlock/subscribe",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HTlcerc20CrossborderUnlockSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn h_tlcerc20_crossborder_unlock_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::Htlcerc20CrossborderUnlockSubscribeRequest,
) -> Result<
    models::Htlcerc20CrossborderUnlockEvent,
    Error<HTlcerc20CrossborderUnlockSubscribeAllError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/HTLCERC20CrossborderUnlock/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HTlcerc20CrossborderUnlockSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn h_tlcerc20_new_ammto_payee_subscribe(
    configuration: &configuration::Configuration,
    body: models::Htlcerc20CrossborderUnlockSubscribeRequest,
) -> Result<models::Htlcerc20NewAmmtoPayeeEvent, Error<HTlcerc20NewAmmtoPayeeSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/HTLCERC20NewAMMToPayee/subscribe",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HTlcerc20NewAmmtoPayeeSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn h_tlcerc20_new_ammto_payee_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::Htlcerc20CrossborderUnlockSubscribeRequest,
) -> Result<models::Htlcerc20NewAmmtoPayeeEvent, Error<HTlcerc20NewAmmtoPayeeSubscribeAllError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/HTLCERC20NewAMMToPayee/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HTlcerc20NewAmmtoPayeeSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn h_tlcerc20_new_payer_to_amm_subscribe(
    configuration: &configuration::Configuration,
    body: models::Htlcerc20CrossborderUnlockSubscribeRequest,
) -> Result<models::Htlcerc20NewPayerToAmmEvent, Error<HTlcerc20NewPayerToAmmSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/HTLCERC20NewPayerToAMM/subscribe",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HTlcerc20NewPayerToAmmSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn h_tlcerc20_new_payer_to_amm_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::Htlcerc20CrossborderUnlockSubscribeRequest,
) -> Result<models::Htlcerc20NewPayerToAmmEvent, Error<HTlcerc20NewPayerToAmmSubscribeAllError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/HTLCERC20NewPayerToAMM/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HTlcerc20NewPayerToAmmSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn h_tlcerc20_refund_subscribe(
    configuration: &configuration::Configuration,
    body: models::Htlcerc20CrossborderUnlockSubscribeRequest,
) -> Result<models::Htlcerc20RefundEvent, Error<HTlcerc20RefundSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/HTLCERC20Refund/subscribe",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HTlcerc20RefundSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn h_tlcerc20_refund_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::Htlcerc20CrossborderUnlockSubscribeRequest,
) -> Result<models::Htlcerc20RefundEvent, Error<HTlcerc20RefundSubscribeAllError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/HTLCERC20Refund/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HTlcerc20RefundSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn h_tlcerc20_withdraw_subscribe(
    configuration: &configuration::Configuration,
    body: models::Htlcerc20CrossborderUnlockSubscribeRequest,
) -> Result<models::Htlcerc20WithdrawEvent, Error<HTlcerc20WithdrawSubscribeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/HTLCERC20Withdraw/subscribe",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HTlcerc20WithdrawSubscribeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn h_tlcerc20_withdraw_subscribe_all(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::Htlcerc20CrossborderUnlockSubscribeRequest,
) -> Result<models::Htlcerc20WithdrawEvent, Error<HTlcerc20WithdrawSubscribeAllError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/HTLCERC20Withdraw/subscribe",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HTlcerc20WithdrawSubscribeAllError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn new_contract_get(
    configuration: &configuration::Configuration,
    address: &str,
    _receiver: &str,
    _hashlock: &str,
    _timelock: &str,
    _token_contract: &str,
    _amount: &str,
    _transfer_key: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::NewContractOutputs, Error<NewContractGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/newContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("_receiver", &_receiver.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("_hashlock", &_hashlock.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("_timelock", &_timelock.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("_tokenContract", &_token_contract.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("_amount", &_amount.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("_transferKey", &_transfer_key.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NewContractGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn new_contract_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::NewContractInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::NewContractOutputs, Error<NewContractPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/newContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NewContractPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn new_cross_border_contract_get(
    configuration: &configuration::Configuration,
    address: &str,
    _receiver: &str,
    _timelock: &str,
    _token_contract: &str,
    _transfer_key: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::NewCrossBorderContractOutputs, Error<NewCrossBorderContractGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/newCrossBorderContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("_receiver", &_receiver.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("_timelock", &_timelock.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("_tokenContract", &_token_contract.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("_transferKey", &_transfer_key.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NewCrossBorderContractGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn new_cross_border_contract_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::NewCrossBorderContractInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::NewCrossBorderContractOutputs, Error<NewCrossBorderContractPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/newCrossBorderContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NewCrossBorderContractPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn owner_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::OwnerOutputs, Error<OwnerGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/_owner",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OwnerGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn owner_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::OwnerOutputs, Error<OwnerPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/_owner",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OwnerPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_notification_contract_get(
    configuration: &configuration::Configuration,
    address: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::PaymentNotificationContractOutputs, Error<PaymentNotificationContractGetError>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/_paymentNotificationContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentNotificationContractGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn payment_notification_contract_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: serde_json::Value,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::PaymentNotificationContractOutputs, Error<PaymentNotificationContractPostError>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/_paymentNotificationContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PaymentNotificationContractPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn refund_get(
    configuration: &configuration::Configuration,
    address: &str,
    _contract_id: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::RefundOutputs, Error<RefundGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/refund",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("_contractId", &_contract_id.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RefundGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn refund_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::RefundInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::RefundOutputs, Error<RefundPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/refund",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RefundPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_payment_notification_contract_get(
    configuration: &configuration::Configuration,
    address: &str,
    payment_notification_contract: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<SetPaymentNotificationContractGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/setPaymentNotificationContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[(
        "paymentNotificationContract",
        &payment_notification_contract.to_string(),
    )]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetPaymentNotificationContractGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_payment_notification_contract_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::SetPaymentNotificationContractInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<SetPaymentNotificationContractPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/setPaymentNotificationContract",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SetPaymentNotificationContractPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn unlock_cross_border_payments_get(
    configuration: &configuration::Configuration,
    address: &str,
    transfer_key: &str,
    secret: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<serde_json::Value, Error<UnlockCrossBorderPaymentsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/unlockCrossBorderPayments",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("transferKey", &transfer_key.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("secret", &secret.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UnlockCrossBorderPaymentsGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn unlock_cross_border_payments_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::UnlockCrossBorderPaymentsInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<serde_json::Value, Error<UnlockCrossBorderPaymentsPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/unlockCrossBorderPayments",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UnlockCrossBorderPaymentsPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn withdraw_get(
    configuration: &configuration::Configuration,
    address: &str,
    _contract_id: &str,
    _preimage: &str,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_transaction: Option<&str>,
) -> Result<models::WithdrawOutputs, Error<WithdrawGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/withdraw",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("_contractId", &_contract_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("_preimage", &_preimage.to_string())]);
    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_transaction {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-transaction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WithdrawGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn withdraw_post(
    configuration: &configuration::Configuration,
    address: &str,
    body: models::WithdrawInputs,
    kld_id: Option<&str>,
    kld_from: Option<&str>,
    kld_ethvalue: Option<i32>,
    kld_gas: Option<i32>,
    kld_gasprice: Option<i32>,
    kld_sync: Option<bool>,
    kld_call: Option<bool>,
    kld_privatefrom: Option<&str>,
    kld_privatefor: Option<&str>,
    kld_blocknumber: Option<&str>,
    kld_acktype: Option<&str>,
) -> Result<models::WithdrawOutputs, Error<WithdrawPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{address}/withdraw",
        local_var_configuration.base_path,
        address = crate::apis::urlencode(address)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = kld_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_from {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_ethvalue {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-ethvalue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gas {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gas", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_gasprice {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-gasprice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_sync {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-sync", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_call {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-call", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_privatefor {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-privatefor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_blocknumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-blocknumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kld_acktype {
        local_var_req_builder =
            local_var_req_builder.query(&[("kld-acktype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_basic_auth) = local_var_configuration.basic_auth {
        if let Some(password) = local_var_basic_auth.1.clone() {
            #[allow(deprecated)]
            let auth = base64::encode(format!("{}:{}", local_var_basic_auth.0, password));
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::AUTHORIZATION, format!("Basic {}", auth));
        }
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WithdrawPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
